name: iOS CI

on:
  push:
    branches: [ "main", "develop" ]  # Trigger on pushes to main and develop
  pull_request:
    branches: [ "main", "develop" ]  # Trigger on pull requests targeting main and develop
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  #--- Project Configuration ---
  PROJECT_NAME: Authenticator.xcodeproj  # Replace with your Xcode project name
  SCHEME_NAME: Authenticator        # Replace with your scheme name (usually the same as your project)
  DESTINATION: 'platform=iOS Simulator,name=iPhone 16,OS=latest' # Choose a simulator. Change as needed
  # Optional: Add other environment variables here if needed (e.g., build configuration, build number)

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest  # Use the latest macOS runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Select Xcode Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.0'  # Specify the Xcode version. Change as needed.

      - name: Install Dependencies (Optional - if you use CocoaPods)
        if: ${{ steps.cache-pods.outputs.cache-hit != 'true' }}  #Only install if not cached.
        run: |
          gem install bundler
          bundle install
          bundle exec pod install --repo-update  # Install CocoaPods dependencies

      - name: Cache CocoaPods (Optional - speeds up builds)
        id: cache-pods
        uses: actions/cache@v3
        with:
          path: Pods  # The path to your CocoaPods directory
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}  # Cache based on Podfile.lock changes
          restore-keys: |
            ${{ runner.os }}-pods-  # Restore cache if Podfile.lock hasn't changed.

      - name: Build
        run: |
          xcodebuild clean build -project "${{ env.PROJECT_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ env.DESTINATION }}" -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Run Tests
        run: |
          xcodebuild test -project "${{ env.PROJECT_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ env.DESTINATION }}" -configuration Debug -enableCodeCoverage YES -only-testing:YourProjectTests  # Replace YourProjectTests with your Test Target
      
      - name: Upload Code Coverage Reports (optional)
        uses: codecov/codecov-action@v3
        with:
             files: ${{ github.workspace }}/your_report.xml #Path to the XML report
             fail_ci_if_error: true

      # --- Optional: Fastlane Integration (for more advanced build/release automation) ---
      # - name: Run Fastlane
      #   run: bundle exec fastlane your_lane_name
      #   env:
      #     FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}  # Add your Fastlane password as a secret
      #     MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}        # If you use match for code signing, add the password as a secret.

      # --- Optional: Upload Artifacts (e.g., .ipa, .dSYM) ---
      # - name: Upload IPA
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: YourAppName.ipa
      #     path: path/to/your/ipa/file.ipa   # Update with the correct path

      # --- Optional: Notify on Failure ---
      # - name: Send Slack Notification on Failure
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.23.0 #Use any action that suits your need.
      #   with:
      #     channel-id: 'your-channel-id'
      #     payload: |
      #       {
      #         "text": "‚ùå Build failed for ${{ github.repository }} on branch ${{ github.ref }}",
      #         "attachments": [
      #           {
      #             "color": "#ff0000",  # Red
      #             "fields": [
      #               {
      #                 "title": "Commit",
      #                 "value": "${{ github.sha }}",
      #                 "short": true
      #               },
      #               {
      #                 "title": "Workflow Run",
      #                 "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>",
      #                 "short": true
      #               }
      #             ]
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}  # Add your Slack bot token as a GitHub secret

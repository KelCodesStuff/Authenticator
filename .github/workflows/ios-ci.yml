name: Build

on:
  push:
    branches: [ "main", "develop" ] # Trigger on push to main or develop branches
  pull_request:
    branches: [ "main", "develop" ] # Trigger on pull requests to main or develop branches
  workflow_dispatch: # Allow manual triggering of the workflow

env:
  PROJECT_NAME: Authenticator.xcodeproj # Project file name
  SCHEME_NAME: Authenticator # Xcode scheme name
  DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest' # Simulator destination
  TEST_PLAN_NAME1: "UI-Smoke-Tests" # Test plan for UI smoke tests
  TEST_PLAN_NAME2: "Unit-Smoke-Tests" # Test plan for unit smoke tests
  TEST_PLAN_NAME3: "Performance-Smoke-Tests" # Test plan for performance smoke tests

jobs:
  build-and-test:
    name: Build and Test # Job name
    runs-on: macos-latest # Run on the latest macOS runner

    steps:
      - name: Checkout Code # Check out the repository code
        uses: actions/checkout@v3

      - name: Select Xcode Version # Select the specified Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1.0' # Specify the Xcode version

      - name: Cache SPM Packages # Cache Swift Package Manager dependencies
        id: cache-spm
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm # Path to SPM cache directory
            ${{ github.workspace }}/.build # Path to local build directory
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }} # Cache key based on OS and Package.resolved
          restore-keys: |
            ${{ runner.os }}-spm- # Restore cache based on OS

      - name: Build # Build the project
        run: |
          xcodebuild clean build -project "${{ env.PROJECT_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ env.DESTINATION }}" -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO # Xcode build command

    #  - name: Run UI Smoke Tests # Run UI smoke tests
    #   run: |
    #      xcodebuild test -project "${{ env.PROJECT_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ env.DESTINATION }}" -configuration Debug -enableCodeCoverage YES -testPlan "${{ env.TEST_PLAN_NAME1 }}" # Xcode test command for UI smoke tests

    #  - name: Run Unit Smoke Tests # Run unit smoke tests
    #    run: |
    #      xcodebuild test -project "${{ env.PROJECT_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ env.DESTINATION }}" -configuration Debug -enableCodeCoverage YES -testPlan "${{ env.TEST_PLAN_NAME2 }}" # Xcode test command for unit smoke tests

    #  - name: Run Performance Smoke Tests # Run performance smoke tests
    #    run: |
    #      xcodebuild test -project "${{ env.PROJECT_NAME }}" -scheme "${{ env.SCHEME_NAME }}" -destination "${{ env.DESTINATION }}" -configuration Debug -enableCodeCoverage YES -testPlan "${{ env.TEST_PLAN_NAME3 }}" # Xcode test command for performance smoke tests

    #  - name: Upload Code Coverage Reports (Optional) # Upload code coverage reports
    #    uses: codecov/codecov-action@v3
    #    with:
    #      files: ${{ github.workspace }}/your_report.xml # Path to code coverage report
    #      fail_ci_if_error: true # Fail CI if code coverage upload fails

      # --- Optional: Fastlane Integration (for more advanced build/release automation) ---
      # - name: Run Fastlane
      #   run: bundle exec fastlane your_lane_name
      #   env:
      #     FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      #     MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      # --- Optional: Upload Artifacts ---
      # - name: Upload IPA
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: Authenticator.ipa
      #     path: path/to/your/ipa/file.ipa

      # --- Optional: Notify on Failure ---
      # - name: Send Slack Notification on Failure
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.23.0
      #   with:
      #     channel-id: 'your-channel-id'
      #     payload: |
      #       {
      #         "text": "‚ùå Build failed for Authenticator on branch ${{ github.ref }}",
      #         "attachments": [
      #           {
      #             "color": "#ff0000",
      #             "fields": [
      #               {
      #                 "title": "Commit",
      #                 "value": "${{ github.sha }}",
      #                 "short": true
      #               },
      #               {
      #                 "title": "Workflow Run",
      #                 "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>",
      #                 "short": true
      #               }
      #             ]
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

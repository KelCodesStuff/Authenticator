# CircleCI configuration version
version: 2.1

# Define all jobs that will be run in the pipeline
jobs:
  # Main build and test job
  build-and-test:
    macos:
      xcode: "16.1.0"  # Specify Xcode version for macOS environment
    environment:
      # Environment variables for the build
      PROJECT_NAME: Authenticator.xcodeproj
      SCHEME_NAME: Authenticator
      DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest'
    steps:
      - checkout  # Get code from repository
      # Decode and setup Firebase configuration
      - run:
          name: Decode GoogleService-Info.plist
          command: |
            echo $GOOGLE_SERVICE_INFO_PLIST | base64 --decode > GoogleService-Info.plist
            # Verify the file exists and is in the correct location
            ls -la GoogleService-Info.plist
            pwd
      # Run the main build and test process
      - run:
          name: Build
          command: |
            # Make sure we're in the right directory and file exists
            pwd
            ls -la
            # Build and test
            xcodebuild clean test \
              -project "$PROJECT_NAME" \
              -scheme "$SCHEME_NAME" \
              -destination "$DESTINATION" \
              -derivedDataPath DerivedData \
              ENABLE_CRASHLYTICS_UPLOAD=NO \
              CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

  # Job for running unit tests
  run-unit-tests:
    macos:
      xcode: "16.1.0"
    environment:
      PROJECT_NAME: Authenticator.xcodeproj
      SCHEME_NAME: Authenticator
      DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest'
      TEST_PLAN_NAME: "Unit-Smoke-Tests"
    steps:
      - checkout
      # Execute unit test suite
      - run:
          name: "Run Unit Smoke Tests"
          command: |
            xcodebuild test -project "$PROJECT_NAME" -scheme "$SCHEME_NAME" -destination "$DESTINATION" -configuration Debug -enableCodeCoverage YES -testPlan "$TEST_PLAN_NAME" ENABLE_CRASHLYTICS_UPLOAD=NO
      # Store test results as artifacts
      - store_artifacts:
          path: build/Logs/Test
          destination: unit-test-results

  # Job for running performance tests
  run-performance-tests:
    macos:
      xcode: "16.1.0"
    environment:
      PROJECT_NAME: Authenticator.xcodeproj
      SCHEME_NAME: Authenticator
      DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest'
      TEST_PLAN_NAME: "Performance-Smoke-Tests"
    steps:
      - checkout
      # Execute performance test suite
      - run:
          name: "Run Performance Smoke Tests"
          command: |
            xcodebuild test -project "$PROJECT_NAME" -scheme "$SCHEME_NAME" -destination "$DESTINATION" -configuration Debug -enableCodeCoverage YES -testPlan "$TEST_PLAN_NAME" ENABLE_CRASHLYTICS_UPLOAD=NO
      # Store test results as artifacts
      - store_artifacts:
          path: build/Logs/Test
          destination: performance-test-results

  # Job for running UI tests
  run-ui-tests:
    macos:
      xcode: "16.1.0"
    environment:
      PROJECT_NAME: Authenticator.xcodeproj
      SCHEME_NAME: Authenticator
      DESTINATION: 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest'
      TEST_PLAN_NAME: "UI-Smoke-Tests"
    steps:
      - checkout
      # Execute UI test suite
      - run:
          name: "Run UI Smoke Tests"
          command: |
            xcodebuild test -project "$PROJECT_NAME" -scheme "$SCHEME_NAME" -destination "$DESTINATION" -configuration Debug -enableCodeCoverage YES -testPlan "$TEST_PLAN_NAME" ENABLE_CRASHLYTICS_UPLOAD=NO
      # Store test results as artifacts
      - store_artifacts:
          path: build/Logs/Test
          destination: ui-test-results

  # Job for generating and uploading code coverage reports
  upload-coverage:
    macos:
      xcode: "16.1.0"
    steps:
      - checkout
      # Generate coverage report in JSON format
      - run:
          name: "Generate Code Coverage Report"
          command: |
            xccov generate --archive build/Logs/Test/*.xcresult --output codecov.json
      # Upload coverage data to Codecov
      - run:
          name: "Upload Code Coverage Reports"
          command: |
            curl -Os https://uploader.codecov.io/latest/macos/codecov
            chmod +x codecov
            ./codecov -f codecov.json
      # Store coverage report as artifact
      - store_artifacts:
          path: codecov.json
          destination: coverage-report

# Define workflow for orchestrating jobs
workflows:
  version: 2
  build-test:
    jobs:
      # Start with build and test
      - build-and-test
      # Run all test suites after successful build
      - run-unit-tests:
          requires:
            - build-and-test
      - run-performance-tests:
          requires:
            - build-and-test
      - run-ui-tests:
          requires:
            - build-and-test
      # Upload coverage after all tests complete
      - upload-coverage:
          requires:
            - run-unit-tests
            - run-performance-tests
            - run-ui-tests
          # Only run coverage upload on main and develop branches
          filters:
            branches:
              only:
                - main
                - develop
          # Use organization-wide context for shared credentials
          context:
            - org-global
